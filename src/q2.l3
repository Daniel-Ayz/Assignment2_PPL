(define take
  (lambda (lst pos)
    (if (empty? lst)
        '()
        (if (> pos 0)
            (cons (car lst) (take (cdr lst) (- pos 1)))
            '()
         )
     )
  )
 )

(define take-map
  (lambda (lst func pos)
    (if (empty? lst)
        '()
        (if (> pos 0)
            (cons (func (car lst)) (take-map (cdr lst) func (- pos 1)))
            '()
         )
     )
  )
 )

(define take-filter
  (lambda (lst pred pos)
    (if (empty? lst)
        '()
        (if (> pos 0)
            (if (pred (car lst))
                (cons (car lst) (take-filter (cdr lst) pred (- pos 1)))
                (take-filter (cdr lst) pred pos)
            )
            '()
         )
     )
  )
 )

(define sub-size
  (lambda (lst size)
    (if (> (length lst) (- size 1))
        (cons (take lst size) (if (> (length lst) 0)(sub-size (cdr lst) size) '()))
        '()
     )
  )
 )

(define sub-size-map
  (lambda (lst func size)
    (if (> (length lst) (- size 1))
        (cons (take-map lst func size) (if (> (length lst) 0)(sub-size-map (cdr lst) func size) '()))
        '()
     )
  )
 )

(define nth
  (lambda (lst n)
    (if (eq? lst '())
        '()
        (if (= n 0)
            (car lst)
            (nth (cdr lst) (- n 1))))))


(define root
  (lambda (tree)
    (car tree)
  )
 )

(define left
  (lambda (tree)
    (if (eq? tree '())
        '()
        (nth tree 1)
     )
  )
 )

(define right
  (lambda (tree)
    (if (eq? tree '())
        '()
        (nth tree 2)
     )
  )
 )


(define count-node
  (lambda (tree val)
    (if (empty? tree)
        0
        (if (pair? tree)
       (if (eq? (root tree) val)
           (+ (+ 1 (count-node (left tree) val)) (count-node (right tree) val))
           (+ (count-node (left tree) val) (count-node (right tree) val))
        )
       (if (eq? tree val)
           1
           0
        )
     )
     )
   )
 )

(define mirror-tree
  (lambda (tree)
    (if (empty? tree)
        '()
        (if (pair? tree)
             (list (root tree) (mirror-tree(right tree)) (mirror-tree(left tree)))
             tree
         )
     )
  )
 )



(define make-ok
  (lambda (val)
    (cons 'ok val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons 'error msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res)
            (eq? (car res) 'ok)
            #f
        )
  )
 )

(define error?
  (lambda (res)
    (if (pair? res)
        (eq? (car res) 'error)
        #f
    )

  )
 )

(define result?
  (lambda (res)
    (or (error? res) (ok? res))
  )
 )

(define result->val
  (lambda (res)
    (if (result? res)
        (cdr res)
        (make-error "Error: not a result")
     )

  )
)

(define bind 
  (lambda (f)
    (lambda (res)
            (if (result? res)
                (if (ok? res)
                    (f (result->val res))
                    res
                )
                (make-error "Error: not a result")
            )
    )
  )
)